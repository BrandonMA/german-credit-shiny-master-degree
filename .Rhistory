mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
# Modificar la función de distancia para asegurar que la ruta incluya la capital de inicio
distancia <- function(r, total_ciudades, capital_inicio) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurarse de que la capital de inicio sea parte de la ruta
ruta <- c(fila_capital_inicio, sample(setdiff(1:total_ciudades, fila_capital_inicio), length(r) - 1))
print(ruta)
# Calcular la distancia total de la ruta utilizando Haversine
distancia_total = 0
for (i in 1:(length(ruta) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
distancia <- function(r, num_ciudades, capital_inicio) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Generar índices de las demás capitales excluyendo la capital de inicio
indices_resto <- setdiff(1:nrow(capitales), fila_capital_inicio)
# Muestra aleatoria de los índices restantes con tamaño num_ciudades - 1 porque incluiremos la capital de inicio
ruta_resto <- sample(indices_resto, num_ciudades - 1)
# Insertar fila_capital_inicio en una posición aleatoria dentro de ruta_resto
posicion_capital_inicio <- sample(num_ciudades, 1)  # Elegir una posición aleatoria dentro de la ruta
ruta <- append(ruta_resto, fila_capital_inicio, posicion_capital_inicio - 1)  # Insertar en la posición elegida
print(ruta)  # Imprimir la ruta para verificar
# Calcular la distancia total de la ruta utilizando Haversine
distancia_total = 0
for (i in 1:(length(ruta) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
distancia <- function(r, num_ciudades, capital_inicio) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Generar índices de las demás capitales excluyendo la capital de inicio
indices_resto <- setdiff(1:nrow(capitales), fila_capital_inicio)
# Muestra aleatoria de los índices restantes con tamaño num_ciudades - 1 porque incluiremos la capital de inicio
ruta_resto <- sample(indices_resto, num_ciudades - 1)
# Insertar fila_capital_inicio en una posición aleatoria dentro de ruta_resto
posicion_capital_inicio <- sample(num_ciudades, 1)  # Elegir una posición aleatoria dentro de la ruta
ruta <- append(ruta_resto, fila_capital_inicio, posicion_capital_inicio - 1)  # Insertar en la posición elegida
print(ruta)  # Imprimir la ruta para verificar
# Calcular la distancia total de la ruta utilizando Haversine
distancia_total = 0
for (i in 1:(length(ruta) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
distancia <- local({
ciudades_seleccionadas <- NULL  # Inicializa la variable fuera de la función de distancia
function(r, total_ciudades, capital_inicio) {
if (is.null(ciudades_seleccionadas)) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Excluir la capital de inicio de la selección
indices_resto <- setdiff(1:total_ciudades, fila_capital_inicio)
# Seleccionar al azar 'total_ciudades - 1' ciudades (excluyendo la capital de inicio)
ciudades_seleccionadas <<- sample(indices_resto, total_ciudades - 1)
# Añadir la capital de inicio al conjunto de ciudades seleccionadas
ciudades_seleccionadas <<- c(fila_capital_inicio, ciudades_seleccionadas)
}
# Calcular la distancia total de la ruta utilizando Haversine
distancia_total = 0
for (i in 1:(length(ruta) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
distancia <- local({
ciudades_seleccionadas <- NULL  # Inicializa la variable fuera de la función de distancia
function(r, total_ciudades, capital_inicio) {
if (is.null(ciudades_seleccionadas)) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Excluir la capital de inicio de la selección
indices_resto <- setdiff(1:total_ciudades, fila_capital_inicio)
# Seleccionar al azar 'total_ciudades - 1' ciudades (excluyendo la capital de inicio)
ciudades_seleccionadas <<- sample(indices_resto, total_ciudades - 1)
# Añadir la capital de inicio al conjunto de ciudades seleccionadas
ciudades_seleccionadas <<- c(fila_capital_inicio, ciudades_seleccionadas)
}
# Calcula la distancia total de la ruta utilizando las ciudades seleccionadas
distancia_total = 0
for (i in 1:(length(r) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
})
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
# Función Haversine para calcular la distancia entre dos puntos geográficos
haversine <- function(lon1, lat1, lon2, lat2) {
R <- 6371  # Radio de la Tierra en km
rad <- pi / 180
delta_lat <- (lat2 - lat1) * rad
delta_lon <- (lon2 - lon1) * rad
a <- sin(delta_lat / 2) ^ 2 + cos(lat1 * rad) * cos(lat2 * rad) * sin(delta_lon / 2) ^ 2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
return(R * c)  # Distancia en kilómetros
}
distancia <- local({
ciudades_seleccionadas <- NULL  # Inicializa la variable fuera de la función de distancia
function(ruta, total_ciudades, capital_inicio) {
if (is.null(ciudades_seleccionadas)) {
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Excluir la capital de inicio de la selección
indices_resto <- setdiff(1:total_ciudades, fila_capital_inicio)
# Seleccionar al azar 'total_ciudades - 1' ciudades (excluyendo la capital de inicio)
ciudades_seleccionadas <<- sample(indices_resto, total_ciudades - 1)
# Añadir la capital de inicio al conjunto de ciudades seleccionadas
ciudades_seleccionadas <<- c(fila_capital_inicio, ciudades_seleccionadas)
}
# Calcula la distancia total de la ruta utilizando las ciudades seleccionadas
distancia_total = 0
for (i in 1:(length(ruta) - 1)) {
lon1 = capitales[ruta[i], 'capital_lng']
lat1 = capitales[ruta[i], 'capital_lat']
inicio = capitales[ruta[i], 'capital']
lon2 = capitales[ruta[i + 1], 'capital_lng']
lat2 = capitales[ruta[i + 1], 'capital_lat']
final = capitales[ruta[i], 'capital']
distancia_total = distancia_total + haversine(lon1, lat1, lon2, lat2)
}
if (inicio != capital_inicio || final == capital_inicio) {
distancia_total = distancia_total + 10000
}
return(-distancia_total)  # Negar la distancia ya que GA busca maximizar
}
})
# Función para dibujar la ruta, asegurando que termine con la capital de inicio
dibujar_ruta <- function(capital_inicio, total_ciudades) {
set.seed(123)  # Para reproducibilidad
resultado <- ga(type = 'permutation', lower = 1, upper = total_ciudades, maxiter = 100,
popSize = 20 * total_ciudades, pcrossover = 0.8, pmutation = 0.25,
fitness = function(r) distancia(r, total_ciudades, capital_inicio))
mejor <- resultado@solution
fila_capital_inicio <- which(capitales$capital == capital_inicio)
# Asegurar que la ruta termine con la capital de inicio
mejor <- c(mejor, fila_capital_inicio)
d <- capitales[mejor, ]
# Cargar datos geográficos de Europa
europa <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(continent == "Europe")
# Código para dibujar el mapa con la ruta
ggplot() +
geom_sf(data = europa, fill = "lightgray", color = "grey") +
geom_point(data = d, aes(x = capital_lng, y = capital_lat), col = 'blue') +
geom_path(data = d, aes(x = capital_lng, y = capital_lat), col = 'red') +
geom_text(data = d, aes(x = capital_lng, y = capital_lat, label = capital),
hjust = 0, vjust = 0, size = 3, nudge_y = 0.2, col = 'black') +
labs(x = "Longitud", y = "Latitud", title = "Mapa de Europa con Capitales y Rutas") +
theme_minimal() +
coord_sf(xlim = c(-20, 50), ylim = c(35, 75))
}
dibujar_ruta("Paris", 5)
shiny::runApp('Downloads/08_02_PracticaShiny-20240305')
runApp('Downloads/08_02_PracticaShiny-20240305')
install.packages(c("randomForest", "e1071"))
shiny::runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
install.packages("brinton")
knitr::opts_chunk$set(echo = TRUE)
library(brinton)
library(ggplot2)
wideplot(iris)
longplot(iris, 'Petal.Width')
longplot(iris, c('Petal.Width', 'Sepal.Length'))
wideplot(iris)
wideplot(iris)
longplot(iris, 'Petal.Width')
longplot(iris, c('Petal.Width', 'Sepal.Length'))
plotup(iris, c('Petal.Width'. 'Sepal.Length'), diagram = 'color path graph')
plotup(iris, c('Petal.Width', 'Sepal.Length'), diagram = 'color path graph')
plotup(iris, c('Petal.Width', 'Sepal.Length'), diagram = 'color path graph', output = 'console')
install.packages("pandoc")
# Front page module
# UI function
tab_0_ui <- function(id) {
# Basically not needed. Just kept here to preserve commonality across files.
ns <- NS(id)
# Main UI
fluidPage(
fluidRow(
box(width = 3, textInput(ns("dat1"),
value = "GermanCredit.csv",
label = "Introduzca el nombre del dataset")),
box(width = 3, textInput(ns("dat2"),
value = "credit_risk",
label = "Introduzca el nombre de la target")),
box(width = 6, checkboxGroupInput(ns("vars"), "Columnas en dataset:",
names(df), inline = T))
), # end: fluidRow
fluidRow(
box(width = 3, numericInput(ns("test1"), min = 0, max = 1, value =0.7, label = "Elija proporcion test - training")),
box(width = 3, selectInput(ns("sel1"), choices = c("Logistica", "Random Forest"), label = "Elija su modelo"))
), # end: fluidRow
fluidRow(
actionButton(ns("SubmitButton1"), "Genera predicciones")
), # end: fluidRow
#Este fluidRow se puede dejar para dibujar resultados
fluidRow(
box(title = "Lift en el primer decil",
width = 3,
verbatimTextOutput(ns("Lift10")))
)
) # end: fluidPage
} # end: tab_0_ui()
# Server function
tab_0_server <- function(input, output, session) {
CalculaLift <- eventReactive(input$SubmitButton1,{
selected_vars <- input$vars
df2 <- df %>% select(all_of(selected_vars))
#Se ponen todos los missing a 0
df2[is.na(df2)] <- 0
showNotification("Ejecutando modelo", duration = 5, type = "message")
if (input$sel1 == "Logistica"){
set.seed(1)
index <- sample(c(1:nrow(df2)), input$test1 * nrow(df2))
#index <- sample(c(1:nrow(df)), 0.7 * nrow(df))
df_train <- df2[index,]
df_test <- df2[-index,]
#Se crea la fórmula con la target y las variables del modelo
suma = names(df2)[1]
indice_target <- which(names(df2) == input$dat2)
i = 1
while (i < length(names(df2 %>% select(-all_of(indice_target))))){
if (i < length(names(df2 %>% select(-all_of(indice_target))))){
i = i + 1
suma = paste0(names(df2)[i], " + ", suma)
}else{
suma = suma
i = i + 1
}
}
formula = paste0(input$dat2, "~", suma)
mod_log <- glm(formula, data = df_train, family = "binomial")
summary(mod_log)
pred_test <- predict(mod_log, df_test, type="response" )
df_test$prediction = pred_test
index1 <- which(names(df_test) == "credit_risk")
index2 <- which(names(df_test) == "prediction")
columnas <- c(index1, index2)
df_test_fin <- df_test %>% select(all_of(columnas))
#Se ordena el dataset en frunción de la probabilidad
df_test_fin <- df_test_fin[order(df_test_fin$prediction, decreasing =  T),]
#Cálculo de la lift en el primer decil
n10 = round((nrow(df_test) / 10), 0)
lift10 = df_test_fin[c(1: n10),]
lift10 = sum(lift10[,1]) / (sum(df_test_fin[,1]) / 10)
print(lift10)
}
})
output$Lift10 <- renderText({CalculaLift()})
} # end: tab_0_server()
shiny::runApp('Desktop/Shiny Project')
install.packages("randomForest")
shiny::runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project/tabs/00_Modelos/tab_module.R')
runApp('Desktop/Shiny Project')
set.seed(1)
runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
runApp('Desktop/Shiny Project')
shiny::runApp('Desktop/german-credit-shiny-master-degree')
shiny::runApp('Desktop/german-credit-shiny-master-degree')
shiny::runApp('Desktop/german-credit-shiny-master-degree')
runApp('Desktop/german-credit-shiny-master-degree')
install.packages("pROC")
runApp('Desktop/german-credit-shiny-master-degree')
runApp('Desktop/german-credit-shiny-master-degree')
shiny::runApp('Desktop/german-credit-shiny-master-degree')
shiny::runApp('Desktop/german-credit-shiny-master-degree')
